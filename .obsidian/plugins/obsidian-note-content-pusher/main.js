/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => ListModified
});

// node_modules/monkey-around/mjs/index.js
function after(promise, cb) {
  return promise.then(cb, cb);
}
function serialize(asyncFunction) {
  let lastRun = Promise.resolve();
  function wrapper(...args) {
    return lastRun = new Promise((res, rej) => {
      after(lastRun, () => {
        asyncFunction.apply(this, args).then(res, rej);
      });
    });
  }
  wrapper.after = function() {
    return lastRun = new Promise((res, rej) => {
      after(lastRun, res);
    });
  };
  return wrapper;
}

// src/main.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  indicatorCharacter: ">>",
  inlineSettingCharacter: "@@",
  automaticPush: false,
  shouldPrepend: false
};
var ListModifiedSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings" });
    new import_obsidian.Setting(containerEl).setName("Content Pusher Character").setDesc("Specify the string of characters you want to use to indicate when you want to push content to a new note.").addText((text) => text.setPlaceholder(">>").setValue(this.plugin.settings.indicatorCharacter).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.indicatorCharacter = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Inline Settings Character").setDesc("Specify the string of characters you want to use within the curly brackts to customize how the content is pushed.").addText((text) => text.setPlaceholder("@@").setValue(this.plugin.settings.inlineSettingCharacter).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.inlineSettingCharacter = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Automatic Push").setDesc("Automatically push content to a new note, when your cursor moves to a new line (without you running a command).").addToggle((toggle) => toggle.setValue(this.plugin.settings.automaticPush).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.automaticPush = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Prepend to existing file").setDesc("If a file already exists, prepends the content to the existing file instead of putting it at the end.").addToggle((toggle) => toggle.setValue(this.plugin.settings.shouldPrepend).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.shouldPrepend = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// src/main.ts
var ListModified = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.automaticPush = serialize((file, _data, cache) => __async(this, null, function* () {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (view != null) {
        const indicatorCharacter = this.settings.indicatorCharacter;
        const editor = view.editor;
        const currentPos = editor.getCursor();
        const nextPos = { line: currentPos.line, ch: currentPos.ch + 1 };
        const zeroPos = { line: currentPos.line, ch: 0 };
        const lineString = editor.getRange(zeroPos, nextPos);
        if (this.settings.automaticPush == true && lineString.includes("]]" + indicatorCharacter + "{") == false) {
          yield this.createAndPush();
        }
      }
    }));
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "create-and-push",
        name: "Create file and push content",
        callback: () => this.createAndPush()
      });
      this.registerEvent(this.app.metadataCache.on("changed", this.automaticPush));
      this.addSettingTab(new ListModifiedSettingTab(this.app, this));
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onunload() {
  }
  createAndPush() {
    return __async(this, null, function* () {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (view != null) {
        const editor = view.editor;
        const editorText = editor.getValue();
        const indicatorCharacter = this.settings.indicatorCharacter;
        let newContent = "";
        let inlineSetting = "";
        let newTitle = "";
        let newAlias = "";
        let shouldPrepend = this.settings.shouldPrepend;
        try {
          newContent = editorText.split("]]" + indicatorCharacter + "{")[1].split("}")[0];
          if (newContent.includes(this.settings.inlineSettingCharacter)) {
            inlineSetting = newContent.split(this.settings.inlineSettingCharacter)[1];
            newContent = newContent.split(this.settings.inlineSettingCharacter)[0];
          }
          if (inlineSetting == "append") {
            shouldPrepend = false;
          } else if (inlineSetting == "prepend") {
            shouldPrepend = true;
          }
          const zeroPos = { line: 0, ch: 0 };
          const lastPos = { line: Number(editor.lineCount()) - 1, ch: editor.getLine(Number(editor.lineCount()) - 1).length };
          const tempSplit = editorText.split("]]" + indicatorCharacter + "{");
          const firstPart = tempSplit[0].split("[[");
          newTitle = firstPart[firstPart.length - 1];
          const restOfNote = tempSplit[1].split("}")[1];
          editor.replaceRange(tempSplit[0] + "]]" + restOfNote, zeroPos, lastPos);
          const newEditorText = tempSplit[0] + "]]" + restOfNote;
          if (newTitle.includes("|" + indicatorCharacter)) {
            newAlias = newTitle.split("|" + indicatorCharacter)[1];
            newTitle = newTitle.split("|" + indicatorCharacter)[0];
            editor.replaceRange(newEditorText.split("|" + indicatorCharacter)[0] + "|" + newEditorText.split("|" + indicatorCharacter)[1], zeroPos, lastPos);
          }
          const files = this.app.vault.getMarkdownFiles();
          let filesWithName = [];
          let baseTitleName = newTitle;
          if (baseTitleName.includes("/")) {
            let pathParts = baseTitleName.split("/");
            baseTitleName = pathParts[pathParts.length - 1];
          }
          let heading = "";
          if (newTitle.includes("#")) {
            heading = newTitle.split("#")[1];
            newTitle = newTitle.split("#")[0];
          }
          console.log("base: " + baseTitleName);
          for (let i = 0; i < files.length; i++) {
            if (files[i].basename == baseTitleName) {
              filesWithName.push(files[i]);
              break;
            }
          }
          let realExistingFile = null;
          if (filesWithName.length > 0) {
            if (filesWithName.length > 1) {
              for (let i = 0; i < filesWithName.length; i++) {
                if (filesWithName[i].path == newTitle + ".md") {
                  realExistingFile = filesWithName[i];
                  break;
                }
              }
            } else {
              realExistingFile = filesWithName[0];
            }
          }
          if (newAlias != "") {
            newAlias = newAlias + ", ";
          }
          if (filesWithName.length == 0) {
            new import_obsidian2.Notice(`Creating file and pushing content...`);
            if (newAlias == "") {
              yield this.app.vault.create(newTitle + ".md", newContent);
            } else {
              newContent = "---\nalias: " + newAlias + "\n---\n" + newContent;
              yield this.app.vault.create(newTitle + ".md", newContent);
            }
          } else {
            let pushingType = "Appending";
            if (shouldPrepend) {
              pushingType = "Prepending";
            }
            new import_obsidian2.Notice(`File already exists. ${pushingType} content...`);
            const fullExistingFileText = yield this.app.vault.read(realExistingFile);
            let newYaml = "";
            let existingFileText = "";
            if (fullExistingFileText.includes("---")) {
              console.log(fullExistingFileText.split("---"));
              if (fullExistingFileText.split("---").length > 2) {
                let currentYaml = fullExistingFileText.split("---")[1];
                for (let i = 2; i < fullExistingFileText.split("---").length; i++) {
                  if (i == 2) {
                    existingFileText = existingFileText + fullExistingFileText.split("---")[i];
                  } else {
                    existingFileText = existingFileText + fullExistingFileText.split("---")[i] + "---";
                  }
                }
                if (currentYaml.includes("alias:")) {
                  newYaml = "---" + currentYaml.split("alias:")[0] + "alias: " + newAlias + currentYaml.split("alias:")[1] + "---";
                } else {
                  newYaml = "---alias: " + newAlias + currentYaml + "---";
                }
              } else {
                newYaml = "---\nalias: " + newAlias + "\n---\n";
                existingFileText = fullExistingFileText;
              }
            } else {
              if (newAlias != "") {
                newYaml = "---\nalias: " + newAlias + "\n---\n";
              }
              existingFileText = fullExistingFileText;
            }
            ;
            if (heading == "") {
              if (shouldPrepend == true) {
                this.app.vault.modify(realExistingFile, newYaml + "\n" + newContent + "\n" + existingFileText);
              } else {
                this.app.vault.modify(realExistingFile, newYaml + existingFileText + "\n" + newContent);
              }
            } else {
              this.app.vault.modify(realExistingFile, newYaml + existingFileText.split("# " + heading)[0] + "\n# " + heading + "\n" + newContent + "\n" + existingFileText.split("# " + heading)[1]);
            }
          }
        } catch (err) {
          if (this.settings.automaticPush == false) {
            new import_obsidian2.Notice(`Didn't detect correct syntax. Doing nothing`);
          }
        }
      }
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
